Add-Type @'
using System;
using System.Net.Sockets;
using System.Threading;

public class Program
{
    public static int MaxRetry = 10;
    public static int BufferSize = 20480;
    static void Main(string[] args)
    {
        Slave(args[0], Convert.ToInt32(args[1]), args[2], Convert.ToInt32(args[3]));
    }
    static bool ConnLock = false;
    public static void Slave(string serverip, int serverport, string targetip, int targetport)
    {


        while (true)
        {
            while (ConnLock)
            { Thread.Sleep(5); }
            Console.WriteLine("Connect to Server....");
            TcpClient client = new TcpClient();
            if (!Connect(serverip, serverport, ref client)) return;

            TcpClient proxy = new TcpClient();
            if (!Connect(targetip, targetport, ref proxy)) return;

            NetworkStream client_ns = null, proxy_ns = null;
            try
            {
                client_ns = client.GetStream();
                proxy_ns = proxy.GetStream();
            }
            catch (Exception ex)
            {
                Console.WriteLine("get Stream failed." + ex.TargetSite.ToString());
            }


            new Thread(new ThreadStart(delegate
            {
                Forward(client_ns, proxy_ns);
            })).Start();
            new Thread(new ThreadStart(delegate
            {
                Forward(proxy_ns, client_ns);
            })).Start();
        }
    }

    static void Forward(NetworkStream ns1, NetworkStream ns2)
    {
        ConnLock = true;
        while (true)
        {
            try
            {
                byte[] bytes = new byte[BufferSize];
                if (ns1.DataAvailable)
                {
                    int len = ns1.Read(bytes, 0, BufferSize);
                    byte[] subbytes = SubBytes(bytes, len, 0);
                    ns2.Write(subbytes, 0, len);
                }
            }
            catch
            {
                ns1.Dispose();
                ns2.Dispose();
                ConnLock = false;
                Console.WriteLine("disconnect...");
                break;
            }
        }
    }

    static bool Connect(string ip, int port, ref TcpClient client)
    {
        int retrycount = 0;
        reconnect:
        try
        {
            client.Connect(ip, port);
        }
        catch
        {
            retrycount++;
            if (retrycount >= MaxRetry)
            {
                Console.WriteLine("Connect failed." + string.Format("{0}:{1}", ip, port));
                return false;
            }
            else
            {
                Console.WriteLine("Connect failed,retry Connect..." + string.Format("{0}:{1}", ip, port));
                goto reconnect;
            }
        }
        return true;
    }
    public static byte[] SubBytes(byte[] bytes, int temp)
    {
        return SubBytes(bytes, bytes.Length - temp, temp);
    }
    public static byte[] SubBytes(byte[] bytes, int len, int temp)
    {
        byte[] databytes = new byte[len];
        Buffer.BlockCopy(bytes, temp, databytes, 0, len);
        return databytes;
    }
    public static byte[] SubBytes(byte[] bytes, int len, ref int temp)
    {
        byte[] databytes = SubBytes(bytes, len, temp);
        temp += len;
        return databytes;
    }
}
'@

